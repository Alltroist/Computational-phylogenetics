legend(750, 1, text.width=10, legend=c("Simple AE (user loss)", "Simple AE (mse loss)",
"Deep AE (user loss)", "Deep AE (mse loss)",
"Denoising AE (user loss)", "Denoising AE (mse loss)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#0000cc'), cex=0.5, lty=1, lwd = 2)
legend(750, 1, legend=c("Simple AE (user loss)", "Simple AE (mse loss)",
"Deep AE (user loss)", "Deep AE (mse loss)",
"Denoising AE (user loss)", "Denoising AE (mse loss)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#0000cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1), xaxt = 'n', lwd=2, ylab='Чувствительность')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя'б )
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend(750, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
legend(730, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
legend(700, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
legend(680, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend(700, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend(670, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend(600, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend(600, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend(400, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend(500, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend(550, 1, legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
text(500, 0,8, "rerer")
?text(500, 0,8, "rerer")
text(500, 0.8, "rerer")
legend("topright", legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend("topright", legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
text(400, 0.8, "rerer")
text(400, 0.9, "rerer")
?circle
draw.circle(500, 0.75654, 1)
library(plotrix)
draw.circle(500, 0.75654, 1)
draw.circle(500, 0.75654, 50)
draw.circle(500, 0.75654, 30)
draw.circle(500, 0.75654, 0)
draw.circle(500, 0.75654, 20)
draw.circle(500, 0.75654, 10)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend("topright", legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
text(400, 0.9, "rerer")
draw.circle(500, 0.75654, 10, lwd=2)
draw.circle(200, 0.55825, 10, lwd=2)
draw.circle(200, 0.72047, 10, lwd=2)
text(400, 0.9, "Оптимальные значения")
text(300, 0.9, "Оптимальные значения")
arrows(400, 0.8, 200, 0,6)
arrows(400, 0.8, 200, 0.6)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend("topright", legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
text(300, 0.9, "Оптимальные значения")
draw.circle(500, 0.75654, 10, lwd=2)
draw.circle(200, 0.55825, 10, lwd=2)
draw.circle(200, 0.72047, 10, lwd=2)
arrows(400, 0.8, 200, 0.6)
arrows(300, 0.8, 200, 0.6)
arrows(300, 0.85, 200, 0.6)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend("topright", legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
text(300, 0.9, "Оптимальные значения")
draw.circle(500, 0.75654, 10, lwd=2)
draw.circle(200, 0.55825, 10, lwd=2)
draw.circle(200, 0.72047, 10, lwd=2)
arrows(300, 0.85, 200, 0.58)
arrows(300, 0.85, 200, 0.81)
arrows(300, 0.85, 500, 0.82)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend("topright", legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
text(300, 0.9, "Оптимальные значения")
draw.circle(500, 0.75654, 10, lwd=2)
draw.circle(200, 0.55825, 10, lwd=2)
draw.circle(200, 0.72047, 10, lwd=2)
arrows(300, 0.85, 200, 0.59)
arrows(300, 0.85, 200, 0.76)
arrows(300, 0.85, 500, 0.80)
arrows(300, 0.85, 200, 0.59, lwd=2)
arrows(300, 0.85, 200, 0.76, lwd=2)
arrows(300, 0.85, 500, 0.80, lwd=2)
draw.circle(500, 0.75654, 10, lwd=2, length=0.1)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend("topright", legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
text(300, 0.9, "Оптимальные значения")
draw.circle(500, 0.75654, 10, lwd=2)
draw.circle(200, 0.55825, 10, lwd=2)
draw.circle(200, 0.72047, 10, lwd=2)
arrows(300, 0.85, 200, 0.59, lwd=2, length = 0.25)
arrows(300, 0.85, 200, 0.76, lwd=2, length = 0.25)
arrows(300, 0.85, 500, 0.80, lwd=2, length = 0.25)
plot(x, sae_user_sens, col='#cc0000', type='b', ylim=c(0,1),
xaxt = 'n', lwd=2, ylab='Чувствительность', xlab='Размер скрытого слоя')
lines(x, sae_mse_sens, col='#cc3300', type='b', lwd=2)
lines(x, dae_user_sens, col='#00cc00', type = 'b', lwd=2)
lines(x, dae_mse_sens, col='#99cc00', type='b', lwd=2)
lines(x, nae_user_sens, col='#0033cc', type = 'b', lwd=2)
lines(x, nae_mse_sens, col='#6600cc', type='b', lwd=2)
axis(side=1, at=x, x, cex.axis=1.0)
legend("topright", legend=c("Однослойный АЭ (user)", "Однослойный АЭ (mse)",
"Многослойный АЭ (user)", "Многослойный АЭ (mse)",
"Шумоудаляющий АЭ (user)", "Шумоудаляющий АЭ (mse)"),
col = c('#cc0000', '#cc3300', '#00cc99', '#99cc00', '#0033cc', '#6600cc'), cex=0.5, lty=1, lwd = 2)
text(300, 0.9, "Оптимальные значения")
draw.circle(500, 0.75654, 10, lwd=2)
draw.circle(200, 0.55825, 10, lwd=2)
draw.circle(200, 0.72047, 10, lwd=2)
arrows(300, 0.85, 200, 0.59, lwd=2, length = 0.1)
arrows(300, 0.85, 200, 0.76, lwd=2, length = 0.1)
arrows(300, 0.85, 500, 0.80, lwd=2, length = 0.1)
olya = [100, 96, 142, 130, 138, 200, 158, 145, 137, 230, 141, 161, 132, 125,
150, 139, 138, 152, 112, 118, 122, 136, 164, 144, 205, 161, 123, 137,
145, 151, 142, 127, 134, 129, 129, 130, 124, 123, 113, 120 ,136, 121,
120, 104, 118, 128, 107, 148, 126, 134, 118, 112, 125, 124, 113, 132,
145, 116, 105, 142, 137, 143, 111, 153, 138, 113, 123, 122, 119, 125,
109, 81, 107, 88, 85, 105, 95, 133, 96, 163, 135, 142, 99, 104, 110, 108
, 81, 90, 88, 78, 93, 96, 85, 96, 124, 81, 95, 107, 78, 95, 92, 109, 81,
71, 96, 98, 110, 70, 87, 77, 89, 80, 76, 68, 82, 73 ]
olya = c(100, 96, 142, 130, 138, 200, 158, 145, 137, 230, 141, 161, 132, 125,
150, 139, 138, 152, 112, 118, 122, 136, 164, 144, 205, 161, 123, 137,
145, 151, 142, 127, 134, 129, 129, 130, 124, 123, 113, 120 ,136, 121,
120, 104, 118, 128, 107, 148, 126, 134, 118, 112, 125, 124, 113, 132,
145, 116, 105, 142, 137, 143, 111, 153, 138, 113, 123, 122, 119, 125,
109, 81, 107, 88, 85, 105, 95, 133, 96, 163, 135, 142, 99, 104, 110, 108,
81, 90, 88, 78, 93, 96, 85, 96, 124, 81, 95, 107, 78, 95, 92, 109, 81,
71, 96, 98, 110, 70, 87, 77, 89, 80, 76, 68, 82, 73)
plot(olya)
x = 1:116
plot(x, olya)
plot(x, olya, xlab="НОМЕР ФОТКИ", ylab="КОЛИЧЕСТВО ЛАЙКОВ")
plot(x, olya, xlab="НОМЕР ФОТКИ", ylab="КОЛИЧЕСТВО ЛАЙКОВ", type="b")
plot(x, olya, xlab="НОМЕР ФОТКИ", ylab="КОЛИЧЕСТВО ЛАЙКОВ", type="b", color="blue")
plot(x, olya, xlab="НОМЕР ФОТКИ", ylab="КОЛИЧЕСТВО ЛАЙКОВ", type="b", col="blue")
getwd()
library(BoolNet)
sink("mynetwork.txt")
cat("targets, factors\n")
cat("MBF, CLN3\n")
cat("SBF, (CLN3 | MBF) & !(YOX1 & YHP1)\n")
cat("YOX1, MBF & SBF\n")
cat("HCM1, MBF & SBF\n")
cat("YHP1, MBF | SBF\n")
cat("SFF, SBF & HCM1\n")
cat("ACE2, SFF\n")
cat("SWI5, SFF\n")
cat("CLN3, (SWI5 & ACE2) & !(YOX1 & YHP1)\n")
sink()
# read file
net <- loadNetwork("mynetwork.txt")
plotNetworkWiring(net)
sim = markovSimulation(net, numIterations = 500)
# 6 states have non-zero Probability
sim
# 6 states have non-zero Probability
sim$reachedStates
# 6 states have non-zero Probability
type(sim$reachedStates)
# 6 states have non-zero Probability
typeof(sim$reachedStates)
# 6 states have non-zero Probability
length(sim$reachedStates)
# 6 states have non-zero Probability
sim$reachedStates
# 6 states have non-zero Probability
sim$reachedStates$Probability
?getAttractors(net)
plotPBNTransitions(sim)
attractors = getAttractors(net, type = "synchronous", method = "exhaustive")
View(sim)
attractors
## (b)
plotAttractors(attractors)
plotStateGraph(attractors)
## (c)
par(mfrow=c(2, 1))
plotAttractors(attractors)
## (d)
dev.off()
plotAttractors(attractors)
new_attractors = getAttractors(net, type = "synchronous", method = "exhaustive", startStates = rep(1,9))
new_attractors
?getPathToAttractor()
?plotSequence()
plotSequence(net)
plotSequence(net, rep(1,9))
getPathToAttractor(net, rep(1,9))
getAttractors(new_net, type= "synchronous", method = "exhaustive")
new_net = fixGenes(net, fixIndices = c("MBF", "CLN3"), values = c(1, 0))
getAttractors(new_net, type= "synchronous", method = "exhaustive")
cb = c(1000)
cb = c()
cl = c()
cb[0] = 0
cl[0] = 0
cb[1] = 0
cl[1] = 0
cb[2]
cb[2] = 3
Fhv = 1.5
Vb = 48;
Vl = 0.61;
Vmax = 2.75
Km = 0.1
Qiv = 8
Qgi = 500
steps = 1000
cb = c()
cl = c()
cb[1] = 0
cl[1] = 0
dt = 10/1000
for (i in 2:steps){
cb[i] = cb[i-1] + dt * ((Fhv * cl[i-1] - cb[i-1]) + Qiv) / Vb
cl[i] = cl[i-1] + dt * ((Fhv * cb[i-1] - cl[i-1]) + Qgi - Vmax * cl[i-1]/(cl[i-1] + Km)) / Vl
}
plot(cb)
plot(cl)
for (i in 2:steps){
cb[i] = cb[i-1] + dt * (Fhv * (cl[i-1] - cb[i-1]) + Qiv) / Vb
cl[i] = cl[i-1] + dt * (Fhv * (cb[i-1] - cl[i-1]) + Qgi - Vmax * cl[i-1]/(cl[i-1] + Km)) / Vl
}
plot(cb)
plot(cl)
plot(cb)
lines(cl)
plot(cl)
lines(cb)
cb[1] = 100
cl[1] = 100
dt = 10/1000
for (i in 2:steps){
cb[i] = cb[i-1] + dt * (Fhv * (cl[i-1] - cb[i-1]) + Qiv) / Vb
cl[i] = cl[i-1] + dt * (Fhv * (cb[i-1] - cl[i-1]) + Qgi - Vmax * cl[i-1]/(cl[i-1] + Km)) / Vl
}
plot(cl)
lines(cb)
for (i in 2:steps){
cb[i] = cb[i-1] + dt * (Fhv * (cl[i-1] - cb[i-1]) + Qiv * (i <= th)) / Vb
cl[i] = cl[i-1] + dt * (Fhv * (cb[i-1] - cl[i-1])  - Vmax * cl[i-1]/(cl[i-1] + Km)) / Vl
}
cb[1] = 0
cl[1] = 0
dt = 10/1000
for (i in 2:steps){
cb[i] = cb[i-1] + dt * (Fhv * (cl[i-1] - cb[i-1]) + Qiv) / Vl
cl[i] = cl[i-1] + dt * (Fhv * (cb[i-1] - cl[i-1]) + Qgi - Vmax * cl[i-1]/(cl[i-1] + Km)) / Vb
}
plot(cl)
lines(cb)
for (i in 2:steps){
cb[i] = cb[i-1] + dt * (Fhv * (cl[i-1] - cb[i-1])) / Vl
cl[i] = cl[i-1] + dt * (Fhv * (cb[i-1] - cl[i-1]) + Qgi - Vmax * cl[i-1]/(cl[i-1] + Km)) / Vb
}
plot(cl)
lines(cb)
library(BoolNet)
sink("mynetwork.txt")
cat("targets, factors\n")
cat("MBF, CLN3\n")
cat("SBF, (CLN3 | MBF) & !(YOX1 & YHP1)\n")
cat("YOX1, MBF & SBF\n")
cat("HCM1, MBF & SBF\n")
cat("YHP1, MBF | SBF\n")
cat("SFF, SBF & HCM1\n")
cat("ACE2, SFF\n")
cat("SWI5, SFF\n")
cat("CLN3, (SWI5 & ACE2) & !(YOX1 & YHP1)\n")
sink()
# read file
net <- loadNetwork("mynetwork.txt")
plotNetworkWiring(net)
sim = markovSimulation(net, numIterations = 500)
markovSimulation(net, numIterations = 500)
## (a)
attractors = getAttractors(net, type = "synchronous", method = "exhaustive")
getAttractors(net, type = "synchronous", method = "exhaustive")
## (b)
plotStateGraph(attractors)
par(mfrow=c(2, 1))
plotAttractors(attractors)
dev.off()
new_attractors = getAttractors(net, type = "synchronous", method = "exhaustive", startStates = rep(1,9))
getPathToAttractor(net, rep(1,9))
plotSequence(net, rep(1,9))
install.packages("ape")
library(ape)
t1 <- read.tree(text = "(a:1,b:1);")
t2 <- read.tree(text = "(b:1,a:1);")
all.equal(t1, t2)
t3 <- read.tree(text = "((a:1,b:1):1,c:2);")
t4 <- read.tree(text = "(c:2,(a:1,b:1):1);")
all.equal(t3, t4) # == all.equal.phylo(t3, t4)
all.equal.phylo(t3, t4)
## two unrooted trees but force comparison as rooted:
a <- read.tree(text = "(a,b,(c,d));")
b <- read.tree(text = "(a,c,(b,d));")
## two random unrooted trees:
c <- rtree(5, rooted = FALSE)
d <- rtree(5, rooted = FALSE)
comparePhylo(c, d, plot = TRUE)
a = read.tree(text = "((CYB_MICMU:0.052894,CYB_MIRZA:0.052978)100:0.052352,(CYB_AOTAI:0.134830,(((CYB_HOOHO:0.030403,((CYB_NOMLE:0.006002,CYB_NOMGA:-0.000570)100:0.042751,(CYB_HYLLA:0.010570,CYB_HYLME:0.008619)80:0.017514)53:0.004408)100:0.045958,((CYB_PONPY:0.023852,CYB_PONAB:0.017844)100:0.059352,(CYB_GORGO:0.035404,((CYB_PANTR:0.023059,CYB_PANPA:0.024747)40:0.006658,(CYB_DENIS:0.008298,(CYB_NEAND:0.011510,CYB_HUMAN:0.007854)70:0.002776)92:0.031408)58:0.014002)66:0.006497)90:0.015413)69:0.017894,(CYB_COLGU:0.085926,(CYB_MACMU:0.103159,CYB_CHLAE:0.057779)96:0.031226)94:0.051182)78:0.038741)100:0.071353,CYB_LEPLC:0.116215);")
plot.phylo(a)
?rep(""
?rep()
rep(1,9)
rep(1,9)
col = c(rep("#FF0000", 10), rep("#00FF00", 10))
plot.phylo(a, edge.color = col)
setwd("C:/Users/user/Desktop/tree")
a = read.tree(file = "fastME_tree.nwk")
b = read.tree(file = "mrBayes_tree.txt")
comparePhylo(a, b)
comparePhylo(a, b, plot = T)
comparePhylo(a, b, plot = T,  force.rooted = TRUE)
comparePhylo(a, c, plot = T,  force.rooted = TRUE)
c = read.tree(file = "PhyML.nwk")
comparePhylo(a, c, plot = T,  force.rooted = TRUE)
all.equal.phylo(a, c)
all.equal.phylo(b, c)
comparePhylo(b, c, plot = T,  force.rooted = TRUE)
d = read.tree(file = "mega_upgma.hwk")
all.equal.phylo(a, c)
all.equal.phylo(a, d)
apple = read.tree(file = "fastME_tree.nwk")
banana = read.tree(file = "mrBayes_tree.txt")
citrus = read.tree(file = "PhyML.nwk")
dima = read.tree(file = "mega_upgma.hwk")
comparePhylo(apple, banana, plot = T,  force.rooted = TRUE)
fastme = read.tree(file = "fastME_tree.nwk")
mrbayes = read.tree(file = "mrBayes_tree.txt")
phyml = read.tree(file = "PhyML.nwk")
mega_upgma = read.tree(file = "mega_upgma.hwk")
comparePhylo(fastme, mrbayes, plot = T,  force.rooted = TRUE)
comparePhylo(fastme, phyml, plot = T,  force.rooted = TRUE)
comparePhylo(mrbayes, phyml, plot = T,  force.rooted = TRUE)
comparePhylo(mrbayes, mega_upgma, plot = T,  force.rooted = TRUE)
comparePhylo(phyml, mega_upgma, plot = T,  force.rooted = TRUE)
comparePhylo(phyml, fastme, plot = T,  force.rooted = TRUE)
asds
adsd
all.equal.phylo(fastme, phyml)
fastme = read.tree(file = "fastME_tree.nwk")
phyml = read.tree(file = "PhyML_tree.nwk")
all.equal.phylo(fastme, phyml)
comparePhylo(phyml, mega_upgma, plot = T,  force.rooted = TRUE)
comparePhylo(phyml, mrbayes, plot = T,  force.rooted = TRUE)
comparePhylo(mrbayes, mega_upgma, plot = T,  force.rooted = TRUE)
comparePhylo(phyml, mrbayes, plot = T,  force.rooted = TRUE)
comparePhylo(phyml, mega_upgma, plot = T,  force.rooted = TRUE)
comparePhylo(phyml, mrbayes, plot = T,  force.rooted = TRUE)
comparePhylo(mrbayes, mega_upgma, plot = T,  force.rooted = TRUE)
